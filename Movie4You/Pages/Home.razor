@page "/"
@inject TmdbApiService TmdbApiService
@inject NavigationManager NavigationManager
@using Movie4You.Models

<h3>Movie4You</h3>

<div class="search-container">
    <input @bind="searchQuery" placeholder="Search for a movie..." class="form-control" />
    <button @onclick="LoadMovies" class="btn btn-primary">Search</button>
</div>

<div class="category-container">
    <select @onchange="OnCategoryChange" class="form-select">
        <option value="">Select Category</option>
        <option value="popular">Popular</option>
        <option value="now_playing">Now Playing</option>
        <option value="upcoming">Upcoming</option>
        <option value="top_rated">Top Rated</option>
    </select>
</div>

<div class="genre-container">
    <select @onchange="OnGenreChange" class="form-select">
        <option value="">All Genre</option>
        <option value="28">Action</option>
        <option value="35">Comedy</option>
        <option value="18">Drama</option>
        <option value="27">Horror</option>
        <option value="10749">Romance</option>
        <option value="16">Animation</option>
    </select>
</div>

@if (movies != null)
{
    <div class="movie-list">
        @foreach (var movie in movies.Results)
        {
            <div class="movie-item card">
                <img src="https://image.tmdb.org/t/p/w200/@movie.Poster_Path" alt="@movie.Title poster" class="card-img-top" />
                <div class="card-body">
                    <h4>@movie.Title (@movie.Release_Date)</h4>
                    <p>@movie.Vote_Average.ToString("0.0")/10</p>
                    <div>
                        @for (int i = 0; i < (int)movie.Vote_Average; i++)
                        {
                            <span class="fa fa-star checked"></span>
                        }
                        @for (int i = (int)movie.Vote_Average; i < 10; i++)
                        {
                            <span class="fa fa-star"></span>
                        }
                    </div>
                    <button @onclick="() => NavigateToDetails(movie)" class="btn btn-info">View Details</button>
                </div>
            </div>
        }
    </div>

    <div class="pagination">
        @if (currentPage > 1)
        {
            <button @onclick="PreviousPage" class="btn btn-secondary">Page Précédente</button>
        }
        <button @onclick="NextPage" class="btn btn-secondary">Page Suivante</button>
    </div>
}

@code {
    private string searchQuery;
    private string selectedCategory;
    private string selectedGenreId;
    private MovieSearchResult movies;
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadDefaultMovies();
    }

    private async Task LoadDefaultMovies()
    {
        movies = await TmdbApiService.GetMoviesByCategoryAsync("popular", currentPage);
    }

    private async Task LoadMovies()
    {
        movies = await TmdbApiService.SearchMoviesAsync(searchQuery, selectedCategory, selectedGenreId, currentPage);
    }

    private async Task LoadMoviesByCategory(string category)
    {
        selectedCategory = category;
        currentPage = 1; // Reset to first page
        await LoadMovies();
    }

    private async Task LoadMoviesByGenre(string genreId)
    {
        selectedGenreId = genreId;
        currentPage = 1; // Reset to first page
        await LoadMovies();
    }

    private async Task OnCategoryChange(ChangeEventArgs e)
    {
        selectedCategory = e.Value.ToString();
        await LoadMoviesByCategory(selectedCategory);
    }

    private async Task OnGenreChange(ChangeEventArgs e)
    {
        selectedGenreId = e.Value.ToString();
        await LoadMoviesByGenre(selectedGenreId);
    }

    private void NavigateToDetails(Movie movie)
    {
        NavigationManager.NavigateTo($"/movie/{movie.Title}");
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadMovies();
        }
    }

    private async Task NextPage()
    {
        currentPage++;
        await LoadMovies();
    }
}
